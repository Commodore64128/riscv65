diff -N -U 3 -r newlib-4.1.0-original/libgloss/riscv/machine/syscall.h newlib-4.1.0/libgloss/riscv/machine/syscall.h
--- newlib-4.1.0-original/libgloss/riscv/machine/syscall.h	2020-12-18 18:50:49.000000000 -0500
+++ newlib-4.1.0/libgloss/riscv/machine/syscall.h	2022-06-20 21:30:18.217298611 -0400
@@ -52,6 +52,8 @@
 #define SYS_stat 1038
 #define SYS_lstat 1039
 #define SYS_time 1062
+#define SYS_rmdir 1152
+#define SYS_rename 1153
 #define SYS_getmainvars 2011
 
 /* Semihosting operations.  */
diff -N -U 3 -r newlib-4.1.0-original/libgloss/riscv/Makefile.in newlib-4.1.0/libgloss/riscv/Makefile.in
--- newlib-4.1.0-original/libgloss/riscv/Makefile.in	2020-12-18 18:50:49.000000000 -0500
+++ newlib-4.1.0/libgloss/riscv/Makefile.in	2022-06-20 21:27:33.677425512 -0400
@@ -21,6 +21,7 @@
 	sys_fstat.c \
 	sys_ftime.c \
 	sys_getcwd.c \
+	sys_getdents.c \
 	sys_getpid.c \
 	sys_gettimeofday.c \
 	sys_isatty.c \
@@ -28,9 +29,12 @@
 	sys_link.c \
 	sys_lseek.c \
 	sys_lstat.c \
+	sys_mkdir.c \
 	sys_openat.c \
 	sys_open.c \
 	sys_read.c \
+	sys_rename.c \
+	sys_rmdir.c \
 	sys_sbrk.c \
 	sys_stat.c \
 	sys_sysconf.c \
@@ -52,6 +56,7 @@
 	sys_getcwd.c \
 	sys_getpid.c \
 	sys_kill.c \
+	sys_mkdir.c \
 	sys_utime.c \
 	sys_wait.c \
 	semihost-sys_close.c \
diff -N -U 3 -r newlib-4.1.0-original/libgloss/riscv/sys_chdir.c newlib-4.1.0/libgloss/riscv/sys_chdir.c
--- newlib-4.1.0-original/libgloss/riscv/sys_chdir.c	2020-12-18 18:50:49.000000000 -0500
+++ newlib-4.1.0/libgloss/riscv/sys_chdir.c	2022-06-03 23:25:39.783614170 -0400
@@ -1,8 +1,9 @@
 #include <machine/syscall.h>
+#include "internal_syscall.h"
 
-/* Stub.  */
+/* Set current directory.  */
 int
 _chdir(const char *path)
 {
-  return -1;
+  return syscall_errno (SYS_chdir, 1, (long)path, 0, 0, 0, 0, 0);
 }
diff -N -U 3 -r newlib-4.1.0-original/libgloss/riscv/sys_getcwd.c newlib-4.1.0/libgloss/riscv/sys_getcwd.c
--- newlib-4.1.0-original/libgloss/riscv/sys_getcwd.c	2020-12-18 18:50:49.000000000 -0500
+++ newlib-4.1.0/libgloss/riscv/sys_getcwd.c	2022-06-03 23:25:36.215540425 -0400
@@ -1,9 +1,14 @@
 #include <machine/syscall.h>
 #include <sys/types.h>
+#include "internal_syscall.h"
 
-/* Stub.  */
+/* Retrieve the current directory.  */
 char *
 _getcwd(char *buf, size_t size)
 {
-  return NULL;
+  /* The system call returns the length of the buffer, including the '\0',
+     or a negative error value... */
+  int rc = syscall_errno (SYS_getcwd, 2, (long)buf, size, 0, 0, 0, 0);
+  /* ...but the user-space function returns a pointer */
+  return rc > 0 ? buf : NULL;
 }
diff -N -U 3 -r newlib-4.1.0-original/libgloss/riscv/sys_getdents.c newlib-4.1.0/libgloss/riscv/sys_getdents.c
--- newlib-4.1.0-original/libgloss/riscv/sys_getdents.c	1969-12-31 19:00:00.000000000 -0500
+++ newlib-4.1.0/libgloss/riscv/sys_getdents.c	2022-06-15 20:24:32.443893419 -0400
@@ -0,0 +1,10 @@
+#include <machine/syscall.h>
+#include "internal_syscall.h"
+#include <dirent.h>
+
+/* Read a directory entry */
+int
+_getdents(int fd, struct dirent *entry)
+{
+  return __internal_syscall (SYS_getdents, 1, (long)fd, (long)entry, 0, 0, 0, 0);
+}
diff -N -U 3 -r newlib-4.1.0-original/libgloss/riscv/sys_mkdir.c newlib-4.1.0/libgloss/riscv/sys_mkdir.c
--- newlib-4.1.0-original/libgloss/riscv/sys_mkdir.c	1969-12-31 19:00:00.000000000 -0500
+++ newlib-4.1.0/libgloss/riscv/sys_mkdir.c	2022-06-09 20:32:28.577714810 -0400
@@ -0,0 +1,9 @@
+#include <machine/syscall.h>
+#include "internal_syscall.h"
+
+/* Make a new directory.  */
+int
+_mkdir(const char *path, int mode)
+{
+  return syscall_errno (SYS_mkdir, 1, (long)path, (long)mode, 0, 0, 0, 0);
+}
diff -N -U 3 -r newlib-4.1.0-original/libgloss/riscv/sys_rename.c newlib-4.1.0/libgloss/riscv/sys_rename.c
--- newlib-4.1.0-original/libgloss/riscv/sys_rename.c	1969-12-31 19:00:00.000000000 -0500
+++ newlib-4.1.0/libgloss/riscv/sys_rename.c	2022-06-20 21:29:08.537348014 -0400
@@ -0,0 +1,9 @@
+#include <machine/syscall.h>
+#include <sys/types.h>
+#include "internal_syscall.h"
+
+/* Rename a file.  */
+int _rename(const char *oldpath, const char *newpath)
+{
+  return syscall_errno (SYS_rename, 2, (long)oldpath, (long)newpath, 0, 0, 0, 0);
+}
diff -N -U 3 -r newlib-4.1.0-original/libgloss/riscv/sys_rmdir.c newlib-4.1.0/libgloss/riscv/sys_rmdir.c
--- newlib-4.1.0-original/libgloss/riscv/sys_rmdir.c	1969-12-31 19:00:00.000000000 -0500
+++ newlib-4.1.0/libgloss/riscv/sys_rmdir.c	2022-06-09 20:58:03.484213430 -0400
@@ -0,0 +1,9 @@
+#include <machine/syscall.h>
+#include "internal_syscall.h"
+
+/* Remove a directory's directory entry.  */
+int
+_rmdir(const char *name)
+{
+  return syscall_errno (SYS_rmdir, 1, (long)name, 0, 0, 0, 0, 0);
+}
diff -N -U 3 -r newlib-4.1.0-original/newlib/libc/include/reent.h newlib-4.1.0/newlib/libc/include/reent.h
--- newlib-4.1.0-original/newlib/libc/include/reent.h	2020-12-18 18:50:49.000000000 -0500
+++ newlib-4.1.0/newlib/libc/include/reent.h	2022-06-03 21:48:24.057072095 -0400
@@ -126,6 +126,8 @@
 #define _wait_r(__reent, __status)                wait(__status)
 #define _write_r(__reent, __fd, __buff, __cnt)    write(__fd, __buff, __cnt)
 #define _gettimeofday_r(__reent, __tp, __tzp)     gettimeofday(__tp, __tzp)
+#define _chdir_r(__reent, __path)                 chdir(__path)
+#define _getcwd_r(__reent, __path, __size)        getcwd(__path, __size)
 
 #ifdef __LARGE64_FILES
 #define _lseek64_r(__reent, __fd, __off, __w)     lseek64(__fd, __off, __w)
@@ -156,6 +158,8 @@
 extern int _unlink_r (struct _reent *, const char *);
 extern int _wait_r (struct _reent *, int *);
 extern _ssize_t _write_r (struct _reent *, int, const void *, size_t);
+extern int _chdir_r (struct _reent *, const char *);
+extern char *_getcwd_r (struct _reent *, char *, size_t);
 
 /* This one is not guaranteed to be available on all targets.  */
 extern int _gettimeofday_r (struct _reent *, struct timeval *__tp, void *__tzp);
diff -N -U 3 -r newlib-4.1.0-original/newlib/libc/include/sys/config.h newlib-4.1.0/newlib/libc/include/sys/config.h
--- newlib-4.1.0-original/newlib/libc/include/sys/config.h	2020-12-18 18:50:49.000000000 -0500
+++ newlib-4.1.0/newlib/libc/include/sys/config.h	2022-06-20 21:20:13.322021163 -0400
@@ -301,4 +301,9 @@
 #define _MB_EXTENDED_CHARSETS_WINDOWS 1
 #endif
 
+/* RLC use a real rename call */
+#ifdef __riscv
+#define HAVE_RENAME 1
+#endif
+
 #endif /* __SYS_CONFIG_H__ */
diff -N -U 3 -r newlib-4.1.0-original/newlib/libc/include/sys/_types.h newlib-4.1.0/newlib/libc/include/sys/_types.h
--- newlib-4.1.0-original/newlib/libc/include/sys/_types.h	2020-12-18 18:50:49.000000000 -0500
+++ newlib-4.1.0/newlib/libc/include/sys/_types.h	2022-05-30 20:30:35.441080989 -0400
@@ -69,7 +69,7 @@
 
 #ifndef __machine_ino_t_defined
 #if (defined(__i386__) && (defined(GO32) || defined(__MSDOS__))) || \
-    defined(__sparc__) || defined(__SPU__)
+    defined(__sparc__) || defined(__SPU__) || defined(__riscv)
 typedef unsigned long __ino_t;
 #else
 typedef unsigned short __ino_t;
diff -N -U 3 -r newlib-4.1.0-original/newlib/libc/machine/riscv/access.c newlib-4.1.0/newlib/libc/machine/riscv/access.c
--- newlib-4.1.0-original/newlib/libc/machine/riscv/access.c	1969-12-31 19:00:00.000000000 -0500
+++ newlib-4.1.0/newlib/libc/machine/riscv/access.c	2022-06-05 19:39:33.192439523 -0400
@@ -0,0 +1,15 @@
+/* connector for access */
+
+#include <reent.h>
+#include <unistd.h>
+
+extern int _access_r (struct _reent *ptr,
+     const char *path,
+     int mode);
+
+int
+access (const char *path, int mode)
+{
+  return _access_r (_REENT, path, mode);
+}
+
diff -N -U 3 -r newlib-4.1.0-original/newlib/libc/machine/riscv/accessr.c newlib-4.1.0/newlib/libc/machine/riscv/accessr.c
--- newlib-4.1.0-original/newlib/libc/machine/riscv/accessr.c	1969-12-31 19:00:00.000000000 -0500
+++ newlib-4.1.0/newlib/libc/machine/riscv/accessr.c	2022-06-05 19:36:44.353104557 -0400
@@ -0,0 +1,57 @@
+/* Reentrant versions of access system call. */
+
+#include <reent.h>
+#include <unistd.h>
+#include <fcntl.h>
+#include <_syslist.h>
+
+/* Some targets provides their own versions of this functions.  Those
+   targets should define REENTRANT_SYSCALLS_PROVIDED in TARGET_CFLAGS.  */
+
+#ifdef _REENT_ONLY
+#ifndef REENTRANT_SYSCALLS_PROVIDED
+#define REENTRANT_SYSCALLS_PROVIDED
+#endif
+#endif
+
+#ifndef REENTRANT_SYSCALLS_PROVIDED
+
+/* We use the errno variable used by the system dependent layer.  */
+#undef errno
+extern int errno;
+
+extern int _access(const char *path, int mode);
+
+/*
+FUNCTION
+	<<_access_r>>---Reentrant version of access
+	
+INDEX
+	_access_r
+
+SYNOPSIS
+	#include <reent.h>
+	int _chdir_r(struct _reent *<[ptr]>,
+		    const char *<[path]>);
+
+DESCRIPTION
+	This is a reentrant version of <<access>>.  It
+	takes a pointer to the global data block, which holds
+	<<errno>>.
+*/
+
+int
+_access_r (struct _reent *ptr,
+     const char *path,
+     int mode)
+{
+  int ret;
+
+  errno = 0;
+  if ((ret = _access (path, mode)) == -1 && errno != 0)
+    ptr->_errno = errno;
+  return ret;
+}
+
+
+#endif /* ! defined (REENTRANT_SYSCALLS_PROVIDED) */
diff -N -U 3 -r newlib-4.1.0-original/newlib/libc/machine/riscv/alphasort.c newlib-4.1.0/newlib/libc/machine/riscv/alphasort.c
--- newlib-4.1.0-original/newlib/libc/machine/riscv/alphasort.c	1969-12-31 19:00:00.000000000 -0500
+++ newlib-4.1.0/newlib/libc/machine/riscv/alphasort.c	2022-06-15 19:26:59.191770418 -0400
@@ -0,0 +1,9 @@
+/* alphasort.c for riscv65 */
+
+#include <string.h>
+#include <dirent.h>
+
+int alphasort(const struct dirent **d1, const struct dirent **d2)
+{
+    return strcoll((*d1)->d_name, (*d2)->d_name);
+}
diff -N -U 3 -r newlib-4.1.0-original/newlib/libc/machine/riscv/closedir.c newlib-4.1.0/newlib/libc/machine/riscv/closedir.c
--- newlib-4.1.0-original/newlib/libc/machine/riscv/closedir.c	1969-12-31 19:00:00.000000000 -0500
+++ newlib-4.1.0/newlib/libc/machine/riscv/closedir.c	2022-06-15 00:15:28.637796478 -0400
@@ -0,0 +1,12 @@
+/* closedir.c for riscv65 */
+
+#include <stdlib.h>
+#include <dirent.h>
+#include <unistd.h>
+
+int closedir(DIR *dirp)
+{
+    int rc = close(dirp->dd_fd);
+    free(dirp);
+    return rc;
+}
diff -N -U 3 -r newlib-4.1.0-original/newlib/libc/machine/riscv/dirfd.c newlib-4.1.0/newlib/libc/machine/riscv/dirfd.c
--- newlib-4.1.0-original/newlib/libc/machine/riscv/dirfd.c	1969-12-31 19:00:00.000000000 -0500
+++ newlib-4.1.0/newlib/libc/machine/riscv/dirfd.c	2022-06-14 23:57:10.534066784 -0400
@@ -0,0 +1,9 @@
+/* dirfd.c for riscv65 */
+
+#include <stdlib.h>
+#include <dirent.h>
+
+int dirfd(DIR *dirp)
+{
+    return dirp->dd_fd;
+}
diff -N -U 3 -r newlib-4.1.0-original/newlib/libc/machine/riscv/fdopendir.c newlib-4.1.0/newlib/libc/machine/riscv/fdopendir.c
--- newlib-4.1.0-original/newlib/libc/machine/riscv/fdopendir.c	1969-12-31 19:00:00.000000000 -0500
+++ newlib-4.1.0/newlib/libc/machine/riscv/fdopendir.c	2022-06-14 23:56:55.043063469 -0400
@@ -0,0 +1,28 @@
+/* fdopendir.c for riscv65 */
+
+#include <errno.h>
+#include <stdlib.h>
+#include <dirent.h>
+#include <sys/stat.h>
+
+DIR *fdopendir(int fd)
+{
+    /* Make sure fd indicates a directory */
+    struct stat st;
+    int rc = fstat(fd, &st);
+    if (rc < 0) {
+        /* fd is not valid */
+        return NULL;
+    }
+    if (!S_ISDIR(st.st_mode)) {
+        errno = ENOTDIR;
+        return NULL;
+    }
+
+    /* Wrap fd in a DIR structure */
+    DIR *dirp = calloc(1, sizeof(DIR));
+    if (dirp != NULL) {
+        dirp->dd_fd = fd;
+    }
+    return dirp;
+}
diff -N -U 3 -r newlib-4.1.0-original/newlib/libc/machine/riscv/Makefile.am newlib-4.1.0/newlib/libc/machine/riscv/Makefile.am
--- newlib-4.1.0-original/newlib/libc/machine/riscv/Makefile.am	2020-12-18 18:50:49.000000000 -0500
+++ newlib-4.1.0/newlib/libc/machine/riscv/Makefile.am	2022-06-15 19:20:08.955767867 -0400
@@ -10,6 +10,11 @@
 
 lib_a_SOURCES = memmove.S memmove-stub.c memset.S memcpy-asm.S memcpy.c strlen.c \
 	strcpy.c strcmp.S setjmp.S ieeefp.c ffs.c
+# riscv65
+lib_a_SOURCES += access.c accessr.c alphasort.c closedir.c dirfd.c fdopendir.c \
+	opendir.c readdir.c readdir_r.c rewinddir.c rmdir.c rmdirr.c scandir.c \
+	seekdir.c telldir.c
+# end riscv65
 lib_a_CCASFLAGS=$(AM_CCASFLAGS)
 lib_a_CFLAGS=$(AM_CFLAGS)
 
diff -N -U 3 -r newlib-4.1.0-original/newlib/libc/machine/riscv/Makefile.in newlib-4.1.0/newlib/libc/machine/riscv/Makefile.in
--- newlib-4.1.0-original/newlib/libc/machine/riscv/Makefile.in	2020-12-18 18:50:49.000000000 -0500
+++ newlib-4.1.0/newlib/libc/machine/riscv/Makefile.in	2022-06-15 19:22:54.578060964 -0400
@@ -75,6 +75,17 @@
 	lib_a-strlen.$(OBJEXT) lib_a-strcpy.$(OBJEXT) \
 	lib_a-strcmp.$(OBJEXT) lib_a-setjmp.$(OBJEXT) \
 	lib_a-ieeefp.$(OBJEXT) lib_a-ffs.$(OBJEXT)
+# riscv65
+am_lib_a_OBJECTS += \
+	lib_a-access.$(OBJEXT) lib_a-accessr.$(OBJEXT) \
+	lib_a-alphasort.$(OBJEXT) lib_a-closedir.$(OBJEXT) \
+	lib_a-dirfd.$(OBJEXT) lib_a-fdopendir.$(OBJEXT) \
+	lib_a-opendir.$(OBJEXT) lib_a-readdir.$(OBJEXT) \
+	lib_a-readdir_r.$(OBJEXT) lib_a-rewinddir.$(OBJEXT) \
+	lib_a-scandir.$(OBJEXT) lib_a-seekdir.$(OBJEXT) \
+	lib_a-telldir.$(OBJEXT) lib_a-rmdir.$(OBJEXT) \
+	lib_a-rmdirr.$(OBJEXT)
+# end riscv65
 lib_a_OBJECTS = $(am_lib_a_OBJECTS)
 DEFAULT_INCLUDES = -I.@am__isrc@
 depcomp =
@@ -202,6 +213,11 @@
 noinst_LIBRARIES = lib.a
 lib_a_SOURCES = memmove.S memmove-stub.c memset.S memcpy-asm.S memcpy.c strlen.c \
 	strcpy.c strcmp.S setjmp.S ieeefp.c ffs.c
+# riscv65
+lib_a_SOURCES += access.c accessr.c alphasort.c closedir.c dirfd.c fdopendir.c \
+	opendir.c readdir.c readdir_r.c rewinddir.c rmdir.c rmdirr.c scandir.c \
+	seekdir.c telldir.c
+# end riscv65
 
 lib_a_CCASFLAGS = $(AM_CCASFLAGS)
 lib_a_CFLAGS = $(AM_CFLAGS)
@@ -337,6 +353,98 @@
 lib_a-ffs.obj: ffs.c
 	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-ffs.obj `if test -f 'ffs.c'; then $(CYGPATH_W) 'ffs.c'; else $(CYGPATH_W) '$(srcdir)/ffs.c'; fi`
 
+# riscv65
+lib_a-access.o: access.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-access.o `test -f 'access.c' || echo '$(srcdir)/'`access.c
+
+lib_a-access.obj: access.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-access.obj `if test -f 'access.c'; then $(CYGPATH_W) 'access.c'; else $(CYGPATH_W) '$(srcdir)/access.c'; fi`
+
+lib_a-accessr.o: accessr.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-accessr.o `test -f 'accessr.c' || echo '$(srcdir)/'`accessr.c
+
+lib_a-accessr.obj: accessr.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-accessr.obj `if test -f 'accessr.c'; then $(CYGPATH_W) 'accessr.c'; else $(CYGPATH_W) '$(srcdir)/accessr.c'; fi`
+
+lib_a-alphasort.o: alphasort.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-alphasort.o `test -f 'alphasort.c' || echo '$(srcdir)/'`alphasort.c
+
+lib_a-alphasort.obj: alphasort.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-alphasort.obj `if test -f 'alphasort.c'; then $(CYGPATH_W) 'alphasort.c'; else $(CYGPATH_W) '$(srcdir)/alphasort.c'; fi`
+
+lib_a-closedir.o: closedir.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-closedir.o `test -f 'closedir.c' || echo '$(srcdir)/'`closedir.c
+
+lib_a-closedir.obj: closedir.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-closedir.obj `if test -f 'closedir.c'; then $(CYGPATH_W) 'closedir.c'; else $(CYGPATH_W) '$(srcdir)/closedir.c'; fi`
+
+lib_a-dirfd.o: dirfd.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-dirfd.o `test -f 'dirfd.c' || echo '$(srcdir)/'`dirfd.c
+
+lib_a-dirfd.obj: dirfd.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-dirfd.obj `if test -f 'dirfd.c'; then $(CYGPATH_W) 'dirfd.c'; else $(CYGPATH_W) '$(srcdir)/dirfd.c'; fi`
+
+lib_a-fdopendir.o: fdopendir.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-fdopendir.o `test -f 'fdopendir.c' || echo '$(srcdir)/'`fdopendir.c
+
+lib_a-fdopendir.obj: fdopendir.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-fdopendir.obj `if test -f 'fdopendir.c'; then $(CYGPATH_W) 'fdopendir.c'; else $(CYGPATH_W) '$(srcdir)/fdopendir.c'; fi`
+
+lib_a-opendir.o: opendir.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-opendir.o `test -f 'opendir.c' || echo '$(srcdir)/'`opendir.c
+
+lib_a-opendir.obj: opendir.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-opendir.obj `if test -f 'opendir.c'; then $(CYGPATH_W) 'opendir.c'; else $(CYGPATH_W) '$(srcdir)/opendir.c'; fi`
+
+lib_a-readdir.o: readdir.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-readdir.o `test -f 'readdir.c' || echo '$(srcdir)/'`readdir.c
+
+lib_a-readdir.obj: readdir.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-readdir.obj `if test -f 'readdir.c'; then $(CYGPATH_W) 'readdir.c'; else $(CYGPATH_W) '$(srcdir)/readdir.c'; fi`
+
+lib_a-readdir_r.o: readdir_r.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-readdir_r.o `test -f 'readdir_r.c' || echo '$(srcdir)/'`readdir_r.c
+
+lib_a-readdir_r.obj: readdir_r.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-readdir_r.obj `if test -f 'readdir_r.c'; then $(CYGPATH_W) 'readdir_r.c'; else $(CYGPATH_W) '$(srcdir)/readdir_r.c'; fi`
+
+lib_a-rewinddir.o: rewinddir.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-rewinddir.o `test -f 'rewinddir.c' || echo '$(srcdir)/'`rewinddir.c
+
+lib_a-rewinddir.obj: rewinddir.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-rewinddir.obj `if test -f 'rewinddir.c'; then $(CYGPATH_W) 'rewinddir.c'; else $(CYGPATH_W) '$(srcdir)/rewinddir.c'; fi`
+
+lib_a-rmdir.o: rmdir.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-rmdir.o `test -f 'rmdir.c' || echo '$(srcdir)/'`rmdir.c
+
+lib_a-rmdir.obj: rmdir.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-rmdir.obj `if test -f 'rmdir.c'; then $(CYGPATH_W) 'rmdir.c'; else $(CYGPATH_W) '$(srcdir)/rmdir.c'; fi`
+
+lib_a-rmdirr.o: rmdirr.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-rmdirr.o `test -f 'rmdirr.c' || echo '$(srcdir)/'`rmdirr.c
+
+lib_a-rmdirr.obj: rmdirr.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-rmdirr.obj `if test -f 'rmdirr.c'; then $(CYGPATH_W) 'rmdirr.c'; else $(CYGPATH_W) '$(srcdir)/rmdirr.c'; fi`
+
+lib_a-scandir.o: scandir.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-scandir.o `test -f 'scandir.c' || echo '$(srcdir)/'`scandir.c
+
+lib_a-scandir.obj: scandir.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-scandir.obj `if test -f 'scandir.c'; then $(CYGPATH_W) 'scandir.c'; else $(CYGPATH_W) '$(srcdir)/scandir.c'; fi`
+
+lib_a-seekdir.o: seekdir.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-seekdir.o `test -f 'seekdir.c' || echo '$(srcdir)/'`seekdir.c
+
+lib_a-seekdir.obj: seekdir.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-seekdir.obj `if test -f 'seekdir.c'; then $(CYGPATH_W) 'seekdir.c'; else $(CYGPATH_W) '$(srcdir)/seekdir.c'; fi`
+
+lib_a-telldir.o: telldir.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-telldir.o `test -f 'telldir.c' || echo '$(srcdir)/'`telldir.c
+
+lib_a-telldir.obj: telldir.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-telldir.obj `if test -f 'telldir.c'; then $(CYGPATH_W) 'telldir.c'; else $(CYGPATH_W) '$(srcdir)/telldir.c'; fi`
+# end riscv65
+
 ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
 	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
 	unique=`for i in $$list; do \
diff -N -U 3 -r newlib-4.1.0-original/newlib/libc/machine/riscv/opendir.c newlib-4.1.0/newlib/libc/machine/riscv/opendir.c
--- newlib-4.1.0-original/newlib/libc/machine/riscv/opendir.c	1969-12-31 19:00:00.000000000 -0500
+++ newlib-4.1.0/newlib/libc/machine/riscv/opendir.c	2022-06-14 23:26:35.544799974 -0400
@@ -0,0 +1,18 @@
+/* opendir.c for riscv65 */
+
+#include <stdlib.h>
+#include <dirent.h>
+#include <fcntl.h>
+
+DIR *opendir(const char *path)
+{
+    DIR *dirp = calloc(1, sizeof(DIR));
+    if (dirp != NULL) {
+        dirp->dd_fd = open(path, O_RDONLY|O_DIRECTORY, 0);
+        if (dirp->dd_fd < 0) {
+            free(dirp);
+            dirp = NULL;
+        }
+    }
+    return dirp;
+}
diff -N -U 3 -r newlib-4.1.0-original/newlib/libc/machine/riscv/readdir.c newlib-4.1.0/newlib/libc/machine/riscv/readdir.c
--- newlib-4.1.0-original/newlib/libc/machine/riscv/readdir.c	1969-12-31 19:00:00.000000000 -0500
+++ newlib-4.1.0/newlib/libc/machine/riscv/readdir.c	2022-06-15 19:52:08.220290096 -0400
@@ -0,0 +1,16 @@
+/* readdir.c for riscv65 */
+
+#include <errno.h>
+#include <stdlib.h>
+#include <dirent.h>
+
+extern int _getdents(int fd, struct dirent *entry);
+
+struct dirent *readdir(DIR *dirp)
+{
+    int count = _getdents(dirp->dd_fd, &dirp->dd_dirent);
+    if (count < 0) {
+        errno = -count;
+    }
+    return count > 0 ? &dirp->dd_dirent : NULL;
+}
diff -N -U 3 -r newlib-4.1.0-original/newlib/libc/machine/riscv/readdir_r.c newlib-4.1.0/newlib/libc/machine/riscv/readdir_r.c
--- newlib-4.1.0-original/newlib/libc/machine/riscv/readdir_r.c	1969-12-31 19:00:00.000000000 -0500
+++ newlib-4.1.0/newlib/libc/machine/riscv/readdir_r.c	2022-06-15 19:52:10.728315208 -0400
@@ -0,0 +1,13 @@
+/* readdir_r.c for riscv65 */
+
+#include <stdlib.h>
+#include <dirent.h>
+
+extern int _getdents(int fd, struct dirent *entries);
+
+int readdir_r(DIR *dirp, struct dirent *entry, struct dirent **result)
+{
+    int count = _getdents(dirp->dd_fd, entry);
+    *result = (count > 0) ? entry : NULL;
+    return count >= 0 ? 0 : -count;
+}
diff -N -U 3 -r newlib-4.1.0-original/newlib/libc/machine/riscv/rewinddir.c newlib-4.1.0/newlib/libc/machine/riscv/rewinddir.c
--- newlib-4.1.0-original/newlib/libc/machine/riscv/rewinddir.c	1969-12-31 19:00:00.000000000 -0500
+++ newlib-4.1.0/newlib/libc/machine/riscv/rewinddir.c	2022-06-15 04:37:17.967252466 -0400
@@ -0,0 +1,9 @@
+/* rewinddir.c for riscv65 */
+
+#include <dirent.h>
+#include <unistd.h>
+
+void rewinddir(DIR *dirp)
+{
+    lseek(dirp->dd_fd, 0, SEEK_SET);
+}
diff -N -U 3 -r newlib-4.1.0-original/newlib/libc/machine/riscv/rmdir.c newlib-4.1.0/newlib/libc/machine/riscv/rmdir.c
--- newlib-4.1.0-original/newlib/libc/machine/riscv/rmdir.c	1969-12-31 19:00:00.000000000 -0500
+++ newlib-4.1.0/newlib/libc/machine/riscv/rmdir.c	2022-06-07 21:35:29.326167207 -0400
@@ -0,0 +1,14 @@
+/* connector for rmdir */
+
+#include <reent.h>
+#include <unistd.h>
+
+extern int _rmdir_r (struct _reent *ptr,
+     const char *path);
+
+int
+rmdir (const char *path)
+{
+  return _rmdir_r (_REENT, path);
+}
+
diff -N -U 3 -r newlib-4.1.0-original/newlib/libc/machine/riscv/rmdirr.c newlib-4.1.0/newlib/libc/machine/riscv/rmdirr.c
--- newlib-4.1.0-original/newlib/libc/machine/riscv/rmdirr.c	1969-12-31 19:00:00.000000000 -0500
+++ newlib-4.1.0/newlib/libc/machine/riscv/rmdirr.c	2022-06-07 21:36:01.026674323 -0400
@@ -0,0 +1,56 @@
+/* Reentrant versions of rmdir system call. */
+
+#include <reent.h>
+#include <unistd.h>
+#include <fcntl.h>
+#include <_syslist.h>
+
+/* Some targets provides their own versions of this functions.  Those
+   targets should define REENTRANT_SYSCALLS_PROVIDED in TARGET_CFLAGS.  */
+
+#ifdef _REENT_ONLY
+#ifndef REENTRANT_SYSCALLS_PROVIDED
+#define REENTRANT_SYSCALLS_PROVIDED
+#endif
+#endif
+
+#ifndef REENTRANT_SYSCALLS_PROVIDED
+
+/* We use the errno variable used by the system dependent layer.  */
+#undef errno
+extern int errno;
+
+extern int _rmdir(const char *path);
+
+/*
+FUNCTION
+	<<_rmdir_r>>---Reentrant version of rmdir
+	
+INDEX
+	_rmdir_r
+
+SYNOPSIS
+	#include <reent.h>
+	int _chdir_r(struct _reent *<[ptr]>,
+		    const char *<[path]>);
+
+DESCRIPTION
+	This is a reentrant version of <<rmdir>>.  It
+	takes a pointer to the global data block, which holds
+	<<errno>>.
+*/
+
+int
+_rmdir_r (struct _reent *ptr,
+     const char *path)
+{
+  int ret;
+
+  errno = 0;
+  if ((ret = _rmdir (path)) == -1 && errno != 0)
+    ptr->_errno = errno;
+  return ret;
+}
+
+
+#endif /* ! defined (REENTRANT_SYSCALLS_PROVIDED) */
diff -N -U 3 -r newlib-4.1.0-original/newlib/libc/machine/riscv/scandir.c newlib-4.1.0/newlib/libc/machine/riscv/scandir.c
--- newlib-4.1.0-original/newlib/libc/machine/riscv/scandir.c	1969-12-31 19:00:00.000000000 -0500
+++ newlib-4.1.0/newlib/libc/machine/riscv/scandir.c	2022-06-15 19:28:25.774521497 -0400
@@ -0,0 +1,89 @@
+/* scandir.c for riscv65 */
+
+#include <errno.h>
+#include <stdlib.h>
+#include <dirent.h>
+
+int scandir(const char *dir, struct dirent ***namelist,
+       int (*sel)(const struct dirent *),
+       int (*compar)(const struct dirent **, const struct dirent **))
+{
+    /* Allocate this many additional entries when needed */
+    const size_t alloc_size = 10;
+
+    struct dirent **nlist = NULL; /* custodial */
+    DIR *dirp = NULL; /* custodial */
+
+    int err = errno;
+    size_t nlsize = 0;
+    size_t nlalloc = 1;
+
+    nlist = malloc(sizeof(struct dirent *));
+    if (nlist == NULL) {
+        goto error;
+    }
+
+    dirp = opendir(dir);
+    if (dirp == NULL) {
+        goto error;
+    }
+
+    while (1) {
+        /* Read a directory entry */
+        struct dirent *entp;
+        struct dirent ent;
+        int err = readdir_r(dirp, &ent, &entp);
+        if (err != 0) {
+            errno = err;
+            goto error;
+        }
+        if (entp == NULL) {
+            break;
+        }
+
+        if (sel == NULL || (*sel)(&ent)) {
+            if (nlsize + 1 >= nlalloc) {
+                /* Extend nlist when it gets full */
+                size_t new_alloc = nlalloc + alloc_size;
+                struct dirent **new_list = realloc(
+                        nlist,
+                        new_alloc * sizeof(struct dirent *));
+                if (new_list == NULL) {
+                    goto error;
+                }
+                nlist = new_list;
+                nlalloc = new_alloc;
+            }
+            /* Add the new entry to nlist */
+            nlist[nlsize] = malloc(sizeof(struct dirent));
+            if (nlist[nlsize] == NULL) {
+                goto error;
+            }
+            *nlist[nlsize++] = ent;
+        }
+    }
+
+    /* Successful completion */
+    errno = err;
+    closedir(dirp);
+    nlist[nlsize] = NULL;
+    qsort(nlist, nlsize, sizeof(nlist[0]),
+            (int (*)(const void *, const void *))compar);
+    return nlsize;
+
+error:
+    /* Clean up after any error */
+    err = errno;
+    if (dirp != NULL) {
+        closedir(dirp);
+    }
+    if (nlist != NULL) {
+        for (size_t i = 0; i < nlsize; ++i) {
+            free(nlist[i]);
+        }
+        free(nlist);
+    }
+    errno = err;
+    *namelist = NULL;
+    return -1;
+}
diff -N -U 3 -r newlib-4.1.0-original/newlib/libc/machine/riscv/seekdir.c newlib-4.1.0/newlib/libc/machine/riscv/seekdir.c
--- newlib-4.1.0-original/newlib/libc/machine/riscv/seekdir.c	1969-12-31 19:00:00.000000000 -0500
+++ newlib-4.1.0/newlib/libc/machine/riscv/seekdir.c	2022-06-15 04:38:33.336498580 -0400
@@ -0,0 +1,9 @@
+/* seekdir.c for riscv65 */
+
+#include <dirent.h>
+#include <unistd.h>
+
+void seekdir(DIR *dirp, long loc)
+{
+    lseek(dirp->dd_fd, loc, SEEK_SET);
+}
diff -N -U 3 -r newlib-4.1.0-original/newlib/libc/machine/riscv/sys/dirent.h newlib-4.1.0/newlib/libc/machine/riscv/sys/dirent.h
--- newlib-4.1.0-original/newlib/libc/machine/riscv/sys/dirent.h	1969-12-31 19:00:00.000000000 -0500
+++ newlib-4.1.0/newlib/libc/machine/riscv/sys/dirent.h	2022-06-15 05:10:40.755524306 -0400
@@ -0,0 +1,20 @@
+/* sys/dirent.h for riscv65 */
+
+#ifndef _SYS_DIRENT_H
+#define _SYS_DIRENT_H
+
+#include <sys/syslimits.h>
+#include <sys/types.h>
+
+struct dirent {
+    off_t d_off;
+    char  d_name[NAME_MAX+1];
+};
+
+typedef struct {
+    int dd_fd;
+    /* For return from readdir */
+    struct dirent dd_dirent;
+} DIR;
+
+#endif
diff -N -U 3 -r newlib-4.1.0-original/newlib/libc/machine/riscv/telldir.c newlib-4.1.0/newlib/libc/machine/riscv/telldir.c
--- newlib-4.1.0-original/newlib/libc/machine/riscv/telldir.c	1969-12-31 19:00:00.000000000 -0500
+++ newlib-4.1.0/newlib/libc/machine/riscv/telldir.c	2022-06-15 05:15:37.623465329 -0400
@@ -0,0 +1,9 @@
+/* telldir.c for riscv65 */
+
+#include <dirent.h>
+#include <unistd.h>
+
+long telldir(DIR *dirp)
+{
+    return lseek(dirp->dd_fd, 0, SEEK_CUR);
+}
diff -N -U 3 -r newlib-4.1.0-original/newlib/libc/reent/chdirr.c newlib-4.1.0/newlib/libc/reent/chdirr.c
--- newlib-4.1.0-original/newlib/libc/reent/chdirr.c	1969-12-31 19:00:00.000000000 -0500
+++ newlib-4.1.0/newlib/libc/reent/chdirr.c	2022-06-03 23:26:55.343874018 -0400
@@ -0,0 +1,56 @@
+/* Reentrant versions of chdir system call. */
+
+#include <reent.h>
+#include <unistd.h>
+#include <fcntl.h>
+#include <_syslist.h>
+
+/* Some targets provides their own versions of this functions.  Those
+   targets should define REENTRANT_SYSCALLS_PROVIDED in TARGET_CFLAGS.  */
+
+#ifdef _REENT_ONLY
+#ifndef REENTRANT_SYSCALLS_PROVIDED
+#define REENTRANT_SYSCALLS_PROVIDED
+#endif
+#endif
+
+#ifndef REENTRANT_SYSCALLS_PROVIDED
+
+/* We use the errno variable used by the system dependent layer.  */
+#undef errno
+extern int errno;
+
+extern int _chdir(const char *path);
+
+/*
+FUNCTION
+	<<_chdir_r>>---Reentrant version of chdir
+	
+INDEX
+	_chdir_r
+
+SYNOPSIS
+	#include <reent.h>
+	int _chdir_r(struct _reent *<[ptr]>,
+		    const char *<[path]>);
+
+DESCRIPTION
+	This is a reentrant version of <<chdir>>.  It
+	takes a pointer to the global data block, which holds
+	<<errno>>.
+*/
+
+int
+_chdir_r (struct _reent *ptr,
+     const char *path)
+{
+  int ret;
+
+  errno = 0;
+  if ((ret = _chdir (path)) == -1 && errno != 0)
+    ptr->_errno = errno;
+  return ret;
+}
+
+
+#endif /* ! defined (REENTRANT_SYSCALLS_PROVIDED) */
diff -N -U 3 -r newlib-4.1.0-original/newlib/libc/reent/getcwdr.c newlib-4.1.0/newlib/libc/reent/getcwdr.c
--- newlib-4.1.0-original/newlib/libc/reent/getcwdr.c	1969-12-31 19:00:00.000000000 -0500
+++ newlib-4.1.0/newlib/libc/reent/getcwdr.c	2022-06-03 23:27:21.395523797 -0400
@@ -0,0 +1,57 @@
+/* Reentrant versions of getcwd system call. */
+
+#include <reent.h>
+#include <unistd.h>
+#include <fcntl.h>
+#include <_syslist.h>
+
+/* Some targets provides their own versions of this functions.  Those
+   targets should define REENTRANT_SYSCALLS_PROVIDED in TARGET_CFLAGS.  */
+
+#ifdef _REENT_ONLY
+#ifndef REENTRANT_SYSCALLS_PROVIDED
+#define REENTRANT_SYSCALLS_PROVIDED
+#endif
+#endif
+
+#ifndef REENTRANT_SYSCALLS_PROVIDED
+
+/* We use the errno variable used by the system dependent layer.  */
+#undef errno
+extern int errno;
+
+extern char *_getcwd(char *buf, size_t size);
+
+/*
+FUNCTION
+	<<_getcwd_r>>---Reentrant version of getcwd
+	
+INDEX
+	_getcwd_r
+
+SYNOPSIS
+	#include <reent.h>
+	int _getcwd_r(struct _reent *<[ptr]>,
+		    char *<[path]>, size_t <[size]>);
+
+DESCRIPTION
+	This is a reentrant version of <<getcwd>>.  It
+	takes a pointer to the global data block, which holds
+	<<errno>>.
+*/
+
+char *
+_getcwd_r (struct _reent *ptr,
+     char *path,
+     size_t size)
+{
+  char *ret;
+
+  errno = 0;
+  if ((ret = _getcwd (path, size)) == NULL && errno != 0)
+    ptr->_errno = errno;
+  return ret;
+}
+
+
+#endif /* ! defined (REENTRANT_SYSCALLS_PROVIDED) */
diff -N -U 3 -r newlib-4.1.0-original/newlib/libc/reent/Makefile.am newlib-4.1.0/newlib/libc/reent/Makefile.am
--- newlib-4.1.0-original/newlib/libc/reent/Makefile.am	2020-12-18 18:50:49.000000000 -0500
+++ newlib-4.1.0/newlib/libc/reent/Makefile.am	2022-06-03 21:57:39.189369281 -0400
@@ -52,6 +52,8 @@
 	statr.c \
 	timesr.c \
 	unlinkr.c \
+	chdirr.c \
+	getcwdr.c \
 	writer.c
 
 libreent_la_LDFLAGS = -Xcompiler -nostdlib
@@ -87,6 +89,8 @@
 	statr.def \
 	timesr.def \
 	unlinkr.def \
+	chdirr.def \
+	getcwdr.def \
 	$(STDIO64_DEFS) \
 	writer.def
 
diff -N -U 3 -r newlib-4.1.0-original/newlib/libc/reent/Makefile.in newlib-4.1.0/newlib/libc/reent/Makefile.in
--- newlib-4.1.0-original/newlib/libc/reent/Makefile.in	2020-12-18 18:50:49.000000000 -0500
+++ newlib-4.1.0/newlib/libc/reent/Makefile.in	2022-06-03 22:24:49.328896617 -0400
@@ -82,6 +82,7 @@
 	lib_a-signalr.$(OBJEXT) lib_a-signgam.$(OBJEXT) \
 	lib_a-sbrkr.$(OBJEXT) lib_a-statr.$(OBJEXT) \
 	lib_a-timesr.$(OBJEXT) lib_a-unlinkr.$(OBJEXT) \
+	lib_a-chdirr.$(OBJEXT) lib_a-getcwdr.$(OBJEXT) \
 	lib_a-writer.$(OBJEXT)
 @HAVE_STDIO64_DIR_TRUE@am__objects_2 = lib_a-fstat64r.$(OBJEXT) \
 @HAVE_STDIO64_DIR_TRUE@	lib_a-lseek64r.$(OBJEXT) \
@@ -102,7 +103,8 @@
 am__objects_6 = closer.lo reent.lo impure.lo fcntlr.lo fstatr.lo \
 	getreent.lo gettimeofdayr.lo isattyr.lo linkr.lo lseekr.lo \
 	mkdirr.lo openr.lo readr.lo renamer.lo signalr.lo signgam.lo \
-	sbrkr.lo statr.lo timesr.lo unlinkr.lo writer.lo
+	sbrkr.lo statr.lo timesr.lo unlinkr.lo chdirr.lo getcwdr.lo \
+	writer.lo
 @HAVE_STDIO64_DIR_TRUE@am__objects_7 = fstat64r.lo lseek64r.lo \
 @HAVE_STDIO64_DIR_TRUE@	stat64r.lo open64r.lo
 am__objects_8 = $(am__objects_7)
@@ -324,6 +326,8 @@
 	statr.c \
 	timesr.c \
 	unlinkr.c \
+	chdirr.c \
+	getcwdr.c \
 	writer.c
 
 libreent_la_LDFLAGS = -Xcompiler -nostdlib
@@ -362,6 +366,8 @@
 	statr.def \
 	timesr.def \
 	unlinkr.def \
+	chdirr.def \
+	getcwdr.def \
 	$(STDIO64_DEFS) \
 	writer.def
 
@@ -555,6 +561,18 @@
 lib_a-unlinkr.obj: unlinkr.c
 	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-unlinkr.obj `if test -f 'unlinkr.c'; then $(CYGPATH_W) 'unlinkr.c'; else $(CYGPATH_W) '$(srcdir)/unlinkr.c'; fi`
 
+lib_a-chdirr.o: chdirr.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-chdirr.o `test -f 'chdirr.c' || echo '$(srcdir)/'`chdirr.c
+
+lib_a-chdirr.obj: chdirr.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-chdirr.obj `if test -f 'chdirr.c'; then $(CYGPATH_W) 'chdirr.c'; else $(CYGPATH_W) '$(srcdir)/chdirr.c'; fi`
+
+lib_a-getcwdr.o: getcwdr.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-getcwdr.o `test -f 'getcwdr.c' || echo '$(srcdir)/'`getcwdr.c
+
+lib_a-getcwdr.obj: getcwdr.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-getcwdr.obj `if test -f 'getcwdr.c'; then $(CYGPATH_W) 'getcwdr.c'; else $(CYGPATH_W) '$(srcdir)/getcwdr.c'; fi`
+
 lib_a-writer.o: writer.c
 	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-writer.o `test -f 'writer.c' || echo '$(srcdir)/'`writer.c
 
diff -N -U 3 -r newlib-4.1.0-original/newlib/libc/syscalls/Makefile.am newlib-4.1.0/newlib/libc/syscalls/Makefile.am
--- newlib-4.1.0-original/newlib/libc/syscalls/Makefile.am	2020-12-18 18:50:49.000000000 -0500
+++ newlib-4.1.0/newlib/libc/syscalls/Makefile.am	2022-06-09 20:28:23.076684533 -0400
@@ -5,15 +5,18 @@
 INCLUDES = $(NEWLIB_CFLAGS) $(CROSS_CFLAGS) $(TARGET_CFLAGS)
 
 GENERAL_SOURCES = \
+	syschdir.c  \
 	sysclose.c	\
 	sysfcntl.c	\
 	sysfstat.c	\
+	sysgetcwd.c \
 	sysgetpid.c	\
 	sysgettod.c	\
 	sysisatty.c	\
 	syskill.c	\
 	syslink.c	\
 	syslseek.c	\
+	sysmkdir.c	\
 	sysopen.c	\
 	sysread.c	\
 	syssbrk.c	\
diff -N -U 3 -r newlib-4.1.0-original/newlib/libc/syscalls/Makefile.in newlib-4.1.0/newlib/libc/syscalls/Makefile.in
--- newlib-4.1.0-original/newlib/libc/syscalls/Makefile.in	2020-12-18 18:50:49.000000000 -0500
+++ newlib-4.1.0/newlib/libc/syscalls/Makefile.in	2022-06-09 20:29:31.899697875 -0400
@@ -72,11 +72,13 @@
 ARFLAGS = cru
 lib_a_AR = $(AR) $(ARFLAGS)
 lib_a_LIBADD =
-am__objects_1 = lib_a-sysclose.$(OBJEXT) lib_a-sysfcntl.$(OBJEXT) \
-	lib_a-sysfstat.$(OBJEXT) lib_a-sysgetpid.$(OBJEXT) \
+am__objects_1 = lib_a-syschdir.$(OBJEXT) lib_a-sysclose.$(OBJEXT) \
+	lib_a-sysfcntl.$(OBJEXT) lib_a-sysfstat.$(OBJEXT) \
+	lib_a-sysgetcwd.$(OBJEXT) lib_a-sysgetpid.$(OBJEXT) \
 	lib_a-sysgettod.$(OBJEXT) lib_a-sysisatty.$(OBJEXT) \
 	lib_a-syskill.$(OBJEXT) lib_a-syslink.$(OBJEXT) \
-	lib_a-syslseek.$(OBJEXT) lib_a-sysopen.$(OBJEXT) \
+	lib_a-syslseek.$(OBJEXT) lib_a-sysmkdir.$(OBJEXT) \
+	lib_a-sysopen.$(OBJEXT) \
 	lib_a-sysread.$(OBJEXT) lib_a-syssbrk.$(OBJEXT) \
 	lib_a-sysstat.$(OBJEXT) lib_a-systimes.$(OBJEXT) \
 	lib_a-sysunlink.$(OBJEXT) lib_a-syswrite.$(OBJEXT)
@@ -88,10 +90,10 @@
 lib_a_OBJECTS = $(am_lib_a_OBJECTS)
 LTLIBRARIES = $(noinst_LTLIBRARIES)
 libsyscalls_la_LIBADD =
-am__objects_3 = sysclose.lo sysfcntl.lo sysfstat.lo sysgetpid.lo \
-	sysgettod.lo sysisatty.lo syskill.lo syslink.lo syslseek.lo \
-	sysopen.lo sysread.lo syssbrk.lo sysstat.lo systimes.lo \
-	sysunlink.lo syswrite.lo
+am__objects_3 = syschdir.lo sysclose.lo sysfcntl.lo sysfstat.lo \
+	sysgetcwd.lo sysgetpid.lo sysgettod.lo sysisatty.lo syskill.lo \
+	syslink.lo syslseek.lo sysmkdir.o sysopen.lo sysread.lo syssbrk.lo \
+	sysstat.lo systimes.lo sysunlink.lo syswrite.lo
 @ELIX_LEVEL_1_FALSE@@ELIX_LEVEL_2_FALSE@am__objects_4 = sysexecve.lo \
 @ELIX_LEVEL_1_FALSE@@ELIX_LEVEL_2_FALSE@	sysfork.lo syswait.lo
 @USE_LIBTOOL_TRUE@am_libsyscalls_la_OBJECTS = $(am__objects_3) \
@@ -269,15 +271,18 @@
 AUTOMAKE_OPTIONS = cygnus
 INCLUDES = $(NEWLIB_CFLAGS) $(CROSS_CFLAGS) $(TARGET_CFLAGS)
 GENERAL_SOURCES = \
+	syschdir.c	\
 	sysclose.c	\
 	sysfcntl.c	\
 	sysfstat.c	\
+	sysgetcwd.c	\
 	sysgetpid.c	\
 	sysgettod.c	\
 	sysisatty.c	\
 	syskill.c	\
 	syslink.c	\
 	syslseek.c	\
+	sysmkdir.c	\
 	sysopen.c	\
 	sysread.c	\
 	syssbrk.c	\
@@ -388,6 +393,12 @@
 lib_a-sysclose.obj: sysclose.c
 	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-sysclose.obj `if test -f 'sysclose.c'; then $(CYGPATH_W) 'sysclose.c'; else $(CYGPATH_W) '$(srcdir)/sysclose.c'; fi`
 
+lib_a-syschdir.o: syschdir.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-syschdir.o `test -f 'syschdir.c' || echo '$(srcdir)/'`syschdir.c
+
+lib_a-syschdir.obj: syschdir.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-syschdir.obj `if test -f 'syschdir.c'; then $(CYGPATH_W) 'syschdir.c'; else $(CYGPATH_W) '$(srcdir)/syschdir.c'; fi`
+
 lib_a-sysfcntl.o: sysfcntl.c
 	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-sysfcntl.o `test -f 'sysfcntl.c' || echo '$(srcdir)/'`sysfcntl.c
 
@@ -400,6 +411,12 @@
 lib_a-sysfstat.obj: sysfstat.c
 	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-sysfstat.obj `if test -f 'sysfstat.c'; then $(CYGPATH_W) 'sysfstat.c'; else $(CYGPATH_W) '$(srcdir)/sysfstat.c'; fi`
 
+lib_a-sysgetcwd.o: sysgetcwd.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-sysgetcwd.o `test -f 'sysgetcwd.c' || echo '$(srcdir)/'`sysgetcwd.c
+
+lib_a-sysgetcwd.obj: sysgetcwd.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-sysgetcwd.obj `if test -f 'sysgetcwd.c'; then $(CYGPATH_W) 'sysgetcwd.c'; else $(CYGPATH_W) '$(srcdir)/sysgetcwd.c'; fi`
+
 lib_a-sysgetpid.o: sysgetpid.c
 	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-sysgetpid.o `test -f 'sysgetpid.c' || echo '$(srcdir)/'`sysgetpid.c
 
@@ -436,6 +453,12 @@
 lib_a-syslseek.obj: syslseek.c
 	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-syslseek.obj `if test -f 'syslseek.c'; then $(CYGPATH_W) 'syslseek.c'; else $(CYGPATH_W) '$(srcdir)/syslseek.c'; fi`
 
+lib_a-sysmkdir.o: sysmkdir.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-sysmkdir.o `test -f 'sysmkdir.c' || echo '$(srcdir)/'`sysmkdir.c
+
+lib_a-sysmkdir.obj: sysmkdir.c
+	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-sysmkdir.obj `if test -f 'sysmkdir.c'; then $(CYGPATH_W) 'sysmkdir.c'; else $(CYGPATH_W) '$(srcdir)/sysmkdir.c'; fi`
+
 lib_a-sysopen.o: sysopen.c
 	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_a_CFLAGS) $(CFLAGS) -c -o lib_a-sysopen.o `test -f 'sysopen.c' || echo '$(srcdir)/'`sysopen.c
 
diff -N -U 3 -r newlib-4.1.0-original/newlib/libc/syscalls/syschdir.c newlib-4.1.0/newlib/libc/syscalls/syschdir.c
--- newlib-4.1.0-original/newlib/libc/syscalls/syschdir.c	1969-12-31 19:00:00.000000000 -0500
+++ newlib-4.1.0/newlib/libc/syscalls/syschdir.c	2022-06-03 22:53:42.268696301 -0400
@@ -0,0 +1,11 @@
+/* connector for chdir */
+
+#include <reent.h>
+#include <unistd.h>
+
+int
+chdir (const char *path)
+{
+  return _chdir_r (_REENT, path);
+}
+
diff -N -U 3 -r newlib-4.1.0-original/newlib/libc/syscalls/sysgetcwd.c newlib-4.1.0/newlib/libc/syscalls/sysgetcwd.c
--- newlib-4.1.0-original/newlib/libc/syscalls/sysgetcwd.c	1969-12-31 19:00:00.000000000 -0500
+++ newlib-4.1.0/newlib/libc/syscalls/sysgetcwd.c	2022-06-03 23:10:26.506269640 -0400
@@ -0,0 +1,11 @@
+/* connector for getcwd */
+
+#include <reent.h>
+#include <unistd.h>
+
+char *
+getcwd (char *path, size_t size)
+{
+  return _getcwd_r (_REENT, path, size);
+}
+
diff -N -U 3 -r newlib-4.1.0-original/newlib/libc/syscalls/sysmkdir.c newlib-4.1.0/newlib/libc/syscalls/sysmkdir.c
--- newlib-4.1.0-original/newlib/libc/syscalls/sysmkdir.c	1969-12-31 19:00:00.000000000 -0500
+++ newlib-4.1.0/newlib/libc/syscalls/sysmkdir.c	2022-06-09 20:27:40.135801677 -0400
@@ -0,0 +1,11 @@
+/* connector for mkdir */
+
+#include <reent.h>
+#include <sys/stat.h>
+
+int
+mkdir (const char *path, mode_t mode)
+{
+  return _mkdir_r (_REENT, path, mode);
+}
+
